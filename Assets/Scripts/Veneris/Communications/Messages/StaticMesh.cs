/******************************************************************************/
// 
// Copyright (c) 2019 Esteban Egea-Lopez http://ait.upct.es/eegea
// 
/*******************************************************************************/



// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Veneris.Communications
{

using global::System;
using global::FlatBuffers;

public struct StaticMesh : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static StaticMesh GetRootAsStaticMesh(ByteBuffer _bb) { return GetRootAsStaticMesh(_bb, new StaticMesh()); }
  public static StaticMesh GetRootAsStaticMesh(ByteBuffer _bb, StaticMesh obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public StaticMesh __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Matrix4x4? Transform { get { int o = __p.__offset(4); return o != 0 ? (Matrix4x4?)(new Matrix4x4()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vec3? Vertices(int j) { int o = __p.__offset(6); return o != 0 ? (Vec3?)(new Vec3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int VerticesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Indexes(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int IndexesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIndexesBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetIndexesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetIndexesArray() { return __p.__vector_as_array<int>(8); }
  public MaterialEMP? Material { get { int o = __p.__offset(10); return o != 0 ? (MaterialEMP?)(new MaterialEMP()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartStaticMesh(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<Matrix4x4> transformOffset) { builder.AddStruct(0, transformOffset.Value, 0); }
  public static void AddVertices(FlatBufferBuilder builder, VectorOffset verticesOffset) { builder.AddOffset(1, verticesOffset.Value, 0); }
  public static void StartVerticesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddIndexes(FlatBufferBuilder builder, VectorOffset indexesOffset) { builder.AddOffset(2, indexesOffset.Value, 0); }
  public static VectorOffset CreateIndexesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIndexesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartIndexesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaterial(FlatBufferBuilder builder, Offset<MaterialEMP> materialOffset) { builder.AddStruct(3, materialOffset.Value, 0); }
  public static Offset<StaticMesh> EndStaticMesh(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<StaticMesh>(o);
  }
  public static void FinishStaticMeshBuffer(FlatBufferBuilder builder, Offset<StaticMesh> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedStaticMeshBuffer(FlatBufferBuilder builder, Offset<StaticMesh> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
