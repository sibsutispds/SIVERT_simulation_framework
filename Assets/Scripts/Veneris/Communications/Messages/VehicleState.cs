/******************************************************************************/
// 
// Copyright (c) 2019 Esteban Egea-Lopez http://ait.upct.es/eegea
// 
/*******************************************************************************/



// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Veneris.Communications
{

using global::System;
using global::FlatBuffers;

public struct VehicleState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static VehicleState GetRootAsVehicleState(ByteBuffer _bb) { return GetRootAsVehicleState(_bb, new VehicleState()); }
  public static VehicleState GetRootAsVehicleState(ByteBuffer _bb, VehicleState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public VehicleState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vec3? Position { get { int o = __p.__offset(4); return o != 0 ? (Vec3?)(new Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vec3? Velocity { get { int o = __p.__offset(6); return o != 0 ? (Vec3?)(new Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public uint Id { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static void StartVehicleState(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vec3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddVelocity(FlatBufferBuilder builder, Offset<Vec3> velocityOffset) { builder.AddStruct(1, velocityOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(2, id, 0); }
  public static Offset<VehicleState> EndVehicleState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<VehicleState>(o);
  }
  public static void FinishVehicleStateBuffer(FlatBufferBuilder builder, Offset<VehicleState> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedVehicleStateBuffer(FlatBufferBuilder builder, Offset<VehicleState> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
