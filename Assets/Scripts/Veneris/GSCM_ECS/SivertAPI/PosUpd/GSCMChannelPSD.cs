// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SivertAPI.PosUpd
{

using global::System;
using global::FlatBuffers;

public struct GSCMChannelPSD : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GSCMChannelPSD GetRootAsGSCMChannelPSD(ByteBuffer _bb) { return GetRootAsGSCMChannelPSD(_bb, new GSCMChannelPSD()); }
  public static GSCMChannelPSD GetRootAsGSCMChannelPSD(ByteBuffer _bb, GSCMChannelPSD obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GSCMChannelPSD __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SpectrumValues? ChannelVector(int j) { int o = __p.__offset(4); return o != 0 ? (SpectrumValues?)(new SpectrumValues()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChannelVectorLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Channel? ChannelID(int j) { int o = __p.__offset(6); return o != 0 ? (Channel?)(new Channel()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ChannelIDLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string V2Xstack { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetV2XstackBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetV2XstackBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetV2XstackArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<GSCMChannelPSD> CreateGSCMChannelPSD(FlatBufferBuilder builder,
      VectorOffset ChannelVectorOffset = default(VectorOffset),
      VectorOffset ChannelIDOffset = default(VectorOffset),
      StringOffset V2XstackOffset = default(StringOffset)) {
    builder.StartObject(3);
    GSCMChannelPSD.AddV2Xstack(builder, V2XstackOffset);
    GSCMChannelPSD.AddChannelID(builder, ChannelIDOffset);
    GSCMChannelPSD.AddChannelVector(builder, ChannelVectorOffset);
    return GSCMChannelPSD.EndGSCMChannelPSD(builder);
  }

  public static void StartGSCMChannelPSD(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddChannelVector(FlatBufferBuilder builder, VectorOffset ChannelVectorOffset) { builder.AddOffset(0, ChannelVectorOffset.Value, 0); }
  public static VectorOffset CreateChannelVectorVector(FlatBufferBuilder builder, Offset<SpectrumValues>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChannelVectorVectorBlock(FlatBufferBuilder builder, Offset<SpectrumValues>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChannelVectorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChannelID(FlatBufferBuilder builder, VectorOffset ChannelIDOffset) { builder.AddOffset(1, ChannelIDOffset.Value, 0); }
  public static void StartChannelIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddV2Xstack(FlatBufferBuilder builder, StringOffset V2XstackOffset) { builder.AddOffset(2, V2XstackOffset.Value, 0); }
  public static Offset<GSCMChannelPSD> EndGSCMChannelPSD(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GSCMChannelPSD>(o);
  }
};


}
