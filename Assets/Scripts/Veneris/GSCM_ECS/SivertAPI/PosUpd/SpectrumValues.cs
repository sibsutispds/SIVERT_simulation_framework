// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SivertAPI.PosUpd
{

using global::System;
using global::FlatBuffers;

public struct SpectrumValues : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SpectrumValues GetRootAsSpectrumValues(ByteBuffer _bb) { return GetRootAsSpectrumValues(_bb, new SpectrumValues()); }
  public static SpectrumValues GetRootAsSpectrumValues(ByteBuffer _bb, SpectrumValues obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SpectrumValues __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int NumberofCarriers(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NumberofCarriersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNumberofCarriersBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetNumberofCarriersBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetNumberofCarriersArray() { return __p.__vector_as_array<int>(4); }
  public double PSDGainCoefficients(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int PSDGainCoefficientsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPSDGainCoefficientsBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetPSDGainCoefficientsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public double[] GetPSDGainCoefficientsArray() { return __p.__vector_as_array<double>(6); }

  public static Offset<SpectrumValues> CreateSpectrumValues(FlatBufferBuilder builder,
      VectorOffset NumberofCarriersOffset = default(VectorOffset),
      VectorOffset PSDGainCoefficientsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    SpectrumValues.AddPSDGainCoefficients(builder, PSDGainCoefficientsOffset);
    SpectrumValues.AddNumberofCarriers(builder, NumberofCarriersOffset);
    return SpectrumValues.EndSpectrumValues(builder);
  }

  public static void StartSpectrumValues(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNumberofCarriers(FlatBufferBuilder builder, VectorOffset NumberofCarriersOffset) { builder.AddOffset(0, NumberofCarriersOffset.Value, 0); }
  public static VectorOffset CreateNumberofCarriersVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNumberofCarriersVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNumberofCarriersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPSDGainCoefficients(FlatBufferBuilder builder, VectorOffset PSDGainCoefficientsOffset) { builder.AddOffset(1, PSDGainCoefficientsOffset.Value, 0); }
  public static VectorOffset CreatePSDGainCoefficientsVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePSDGainCoefficientsVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartPSDGainCoefficientsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<SpectrumValues> EndSpectrumValues(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SpectrumValues>(o);
  }
};


}
